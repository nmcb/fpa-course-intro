─( 11:11:08 )─< command 0 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # 50 * 50;;
- : int = 2500
─( 11:11:08 )─< command 1 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let x = 50;;
val x : int = 50
─( 11:11:18 )─< command 2 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # x * x;;
- : int = 2500
─( 11:12:11 )─< command 3 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let x = 50 in x * x;;
- : int = 2500
─( 11:12:23 )─< command 4 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let a = 1 in
let b = 2 in
  a + b;;
- : int = 3
─( 11:13:01 )─< command 5 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let a = 50 in
let b = 50 in
  a * b;;
- : int = 2500
─( 11:13:47 )─< command 6 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let square x = x * x;;
val square : int -> int = <fun>
─( 11:14:07 )─< command 7 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # square 50;;
- : int = 2500
─( 11:14:31 )─< command 8 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let square_is_even =
  square x mod 2 = 0;;
val square_is_even : bool = true
─( 11:14:38 )─< command 9 >────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let square_is_even x =
  square x mod 2 = 0;;
val square_is_even : int -> bool = <fun>
─( 11:15:45 )─< command 10 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # square_is_even 3
;;
- : bool = false
─( 11:16:16 )─< command 11 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # square_is_even 4;;
- : bool = true
─( 11:16:33 )─< command 12 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let ordered a b c =
  a <= b && b <= c;;
val ordered : 'a -> 'a -> 'a -> bool = <fun>
─( 11:16:40 )─< command 13 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # ordered 1 1 2
;;
- : bool = true
─( 11:17:52 )─< command 14 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # ordered 2 1 3 ;;
- : bool = false
─( 11:18:04 )─< command 15 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let avarage a b = (a +. b) /. 2.0;;
val avarage : float -> float -> float = <fun>
─( 11:18:18 )─< command 16 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let average a b = (a +. b) /. 2.0;;
val average : float -> float -> float = <fun>
─( 11:19:00 )─< command 17 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # average 2.0 3.0
;;
- : float = 2.5
─( 11:19:09 )─< command 18 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # 1 + 2.5
;;
Error: This expression has type float but an expression was expected of type
         int
─( 11:19:21 )─< command 19 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let rec range a b =
  if a > b then []
  else a :: range (a + 1) b;;
val range : int -> int -> int list = <fun>
─( 11:22:23 )─< command 20 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let digits = range 0 9;;
val digits : int list = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
─( 11:26:41 )─< command 21 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # 'c';;
- : char = 'c'
─( 11:27:00 )─< command 22 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # "moi!!!"
;;
- : string = "moi!!!"
─( 12:47:16 )─< command 23 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let rec factorial n =
  match n with
  | 0 | 1 -> 1
  | x     -> x * factorial (x - 1);;
val factorial : int -> int = <fun>
─( 12:47:35 )─< command 24 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # factorial 3
;;
- : int = 6
─( 12:52:37 )─< command 25 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let rec factorial = function
  | 0 | 1 -> 1
  | x     -> x * factorial (x - 1);;
val factorial : int -> int = <fun>
─( 12:52:45 )─< command 26 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # factorial 4;;
- : int = 24
─( 12:53:50 )─< command 27 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # [];;
- : 'a list = []
─( 12:54:00 )─< command 28 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # [1;2;3];;
- : int list = [1; 2; 3]
─( 12:54:20 )─< command 29 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # [true;false;true];;
- : bool list = [true; false; true]
─( 12:54:31 )─< command 30 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # [[1;2];[2;3];[3;4]];;
- : int list list = [[1; 2]; [2; 3]; [3; 4]]
─( 12:54:47 )─< command 31 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # [1] @ [2;3];;
- : int list = [1; 2; 3]
─( 12:55:11 )─< command 32 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # 1 :: [2;3];;
- : int list = [1; 2; 3]
─( 12:55:54 )─< command 33 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec total = function
| [] -> 0
| h :: t -> 1 + total t;;
val total : 'a list -> int = <fun>
─( 12:56:00 )─< command 34 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # total [1;2;3;4;5];;
- : int = 5
─( 12:57:13 )─< command 35 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec total = function
| h :: t -> 1 + total t;;
Lines 1-2, characters 16-23:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
val total : 'a list -> int = <fun>
─( 12:57:24 )─< command 36 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # total [1;2;3];;
Exception: Match_failure ("//toplevel//", 1, 16).
─( 12:58:27 )─< command 37 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # total [[];[];[]];;
Exception: Match_failure ("//toplevel//", 1, 16).
─( 12:58:59 )─< command 38 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec total = function
| [] -> 0
| h :: t -> 1 + total t;;
val total : 'a list -> int = <fun>
─( 13:00:06 )─< command 39 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # total [[];[];[]];;
- : int = 3
─( 13:00:12 )─< command 40 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec total = function
| [] -> 0
| h :: t -> 1 + total t;;
val total : 'a list -> int = <fun>
─( 13:00:15 )─< command 41 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec total = function
| [] -> 0
| _ :: t -> 1 + total t;;
val total : 'a list -> int = <fun>
─( 13:00:59 )─< command 42 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let rec append a b =
  match a with
  | [] -> b
  | h :: t => h :: append t b;;
Error: Syntax error
─( 13:01:05 )─< command 43 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let rec append a b =
  match a with
  | []     -> b
  | h :: t -> h :: append t b;;
val append : 'a list -> 'a list -> 'a list = <fun>
─( 13:02:23 )─< command 44 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # append [[1;2];[3;4]] [1;2];;
Error: This expression has type int but an expression was expected of type
         int list
─( 13:02:40 )─< command 45 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # append [[1;2];[3;4]] [[1;2]];;
- : int list list = [[1; 2]; [3; 4]; [1; 2]]
─( 13:03:06 )─< command 46 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec map f l =
  match l with
  | [] -> []
  | h :: t -> f h :: map f t;;
val map : ('a -> 'b) -> 'a list -> 'b list = <fun>
─( 13:03:17 )─< command 47 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # map (+1) [1;2;3;4];;
Error: This expression has type int but an expression was expected of type
         'a -> 'b
─( 13:04:53 )─< command 48 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # total [1;2;3;4];;
- : int = 4
─( 13:05:25 )─< command 49 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # map total [[1];[2;3];[4]];;
- : int list = [1; 2; 1]
─( 13:06:09 )─< command 50 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # map (fun x -> x * 2) [1;2;3;4;5];;
- : int list = [2; 4; 6; 8; 10]
─( 13:06:28 )─< command 51 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let add a b = a + b;;
val add : int -> int -> int = <fun>
─( 13:06:54 )─< command 52 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let plus6 = add 6;;
val plus6 : int -> int = <fun>
─( 13:08:29 )─< command 53 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # plus6 7;;
- : int = 13
─( 13:08:50 )─< command 54 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # map (add 6) [1;2;3;4];;
- : int list = [7; 8; 9; 10]
─( 13:08:57 )─< command 55 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # map (map (fun x -> x * 2)) [[1;2];[2;3];[3;4]];;
- : int list list = [[2; 4]; [4; 6]; [6; 8]]
─( 13:09:30 )─< command 56 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let t = (1, 1.0, 'c', "one");;
val t : int * float * char * string = (1, 1., 'c', "one")
─( 13:10:24 )─< command 57 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # type person = { firstName : string; lastName: string; age: int };;
type person = { firstName : string; lastName : string; age : int; }
─( 13:41:59 )─< command 58 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let marco = { firstName = "marco"; lastName = "borst"; age = 50 };;
val marco : person = {firstName = "marco"; lastName = "borst"; age = 50}
─( 13:42:56 )─< command 59 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # marco.firstName;;
- : string = "marco"
─( 13:43:41 )─< command 60 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # type color = Red | Yellow | Blue;;
type color = Red | Yellow | Blue
─( 13:43:50 )─< command 61 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let l = [Red; Blue];;
val l : color list = [Red; Blue]
─( 13:44:47 )─< command 62 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # type color = Red | Yellow | Blue | RGB int * int * int;;
Error: Syntax error
─( 13:45:06 )─< command 63 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # type color = Red | Yellow | Blue | RGB of int * int * int;;
type color = Red | Yellow | Blue | RGB of int * int * int
─( 13:45:37 )─< command 64 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let l = [Red; Blue; RGB (100,110,120)];;
val l : color list = [Red; Blue; RGB (100, 110, 120)]
─( 13:45:47 )─< command 65 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # type 'a tree =
| Leaf
| Node of 'a tree * 'a * 'a tree;;
type 'a tree = Leaf | Node of 'a tree * 'a * 'a tree
─( 13:46:11 )─< command 66 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let t = Node (Node (Leaf, 1, Leaf)) 2 (Node (Leaf, 3, Leaf));;
Error: Syntax error
─( 13:47:47 )─< command 67 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let t = Node ((Node (Leaf, 1, Leaf)), 2, (Node (Leaf, 3, Leaf)));;
val t : int tree = Node (Node (Leaf, 1, Leaf), 2, Node (Leaf, 3, Leaf))
─( 13:48:57 )─< command 68 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let rec total = function
| Leaf -> 0
| Node (l, x, r) -> (total l) + 1 + (total r);;
val total : 'a tree -> int = <fun>
─( 13:49:34 )─< command 69 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # total t;;
- : int = 3
─( 13:51:02 )─< command 70 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let rec flip = function
| Leaf -> Leaf
| Node (l, x, r) -> Node (flip r, x, flip l);;
val flip : 'a tree -> 'a tree = <fun>
─( 13:51:10 )─< command 71 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # flip t;;
- : int tree = Node (Node (Leaf, 3, Leaf), 2, Node (Leaf, 1, Leaf))
utop # let x : int ref = ref 3;;
val x : int ref = {contents = 3}
─( 13:52:45 )─< command 73 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # !x;;
- : int = 3
─( 14:50:34 )─< command 74 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # x := 2;;
- : unit = ()
─( 15:09:31 )─< command 75 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # !x;;
- : int = 2
─( 15:09:41 )─< command 76 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let swap a b =
  let t = !a in
    a := !b;
    b := t;;
val swap : 'a ref -> 'a ref -> unit = <fun>
─( 15:09:44 )─< command 77 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let a = ref 3;;
val a : int ref = {contents = 3}
─( 15:29:20 )─< command 78 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let b = ref 2;;
val b : int ref = {contents = 2}
─( 15:29:49 )─< command 79 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # swap a b;;
- : unit = ()
─( 15:29:58 )─< command 80 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # !a;;
- : int = 2
─( 15:30:04 )─< command 81 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # !b;;
- : int = 3
─( 15:30:14 )─< command 82 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let print_number n =
  print_string (string_of_int n);
  print_newline ();;
val print_number : int -> unit = <fun>
─( 15:30:19 )─< command 83 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # print_number 5;;
5
- : unit = ()
─( 15:31:39 )─< command 84 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop #
let smallest_power_of_two x =
  let t = ref 1 in
    while !t < x do
      t := !t * 2
    done;
    !t;;
val smallest_power_of_two : int -> int = <fun>
─( 15:31:48 )─< command 85 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # smallest_power_of_two 200;;
- : int = 256
─( 15:35:17 )─< command 86 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let arr = [|1;2;3|];;
val arr : int array = [|1; 2; 3|]
─( 15:35:36 )─< command 87 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # arr.(0);;
- : int = 1
─( 15:36:37 )─< command 88 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # arr.(0) <- 5;;
- : unit = ()
─( 15:36:49 )─< command 89 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # arr.(0);;
- : int = 5
─( 15:36:59 )─< command 90 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.concat [[1;2]; [2;3]];;
- : int list = [1; 2; 2; 3]
─( 15:37:02 )─< command 91 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.sort compare [1;2;3;4;5;4;3;2;1];;
- : int list = [1; 1; 2; 2; 3; 3; 4; 4; 5]
─( 15:38:30 )─< command 92 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.filter ((>) 5) [3;4;5;6;7;6;5;4;3];;
- : int list = [3; 4; 4; 3]
─( 15:38:47 )─< command 93 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.filter ((<) 5) [3;4;5;6;7;6;5;4;3];;
- : int list = [6; 7; 6]
─( 15:39:23 )─< command 94 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.filter ((<=) 5) [3;4;5;6;7;6;5;4;3];;
- : int list = [5; 6; 7; 6; 5]
─( 15:40:10 )─< command 95 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let lt5 = ((>)5);;
val lt5 : int -> bool = <fun>
─( 15:40:25 )─< command 96 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.filter lt5 [3;4;5;6;7];;
- : int list = [3; 4]
─( 15:43:46 )─< command 97 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let lt5 = (x -> x > 5);;
Error: Syntax error: ')' expected, the highlighted '(' might be unmatched
─( 15:44:10 )─< command 98 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # let lt5 x = x > 5;;
val lt5 : int -> bool = <fun>
─( 15:44:43 )─< command 99 >───────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.filter lt5 [3;4;5;6;7];;
- : int list = [6; 7]
─( 15:45:05 )─< command 100 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # List.filter lt5 [3;4;5;6;7];;
- : int list = [6; 7]
utop #
let size l =
  let rec loop ll n =
    match ll with
    |      [] -> n
    | _ :: tl -> loop tl (n + 1) in
  loop l 0;;
val size : 'a list -> int = <fun>
─( 16:13:36 )─< command 115 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # size [1;2;3;4;5];;
- : int = 5
utop #
let rev l =
  let rec loop ll ac =
    match ll with
    |       [] -> ac
    | hd :: tl -> loop tl (hd :: ac) in
  loop l [];;
val rev : 'a list -> 'a list = <fun>
─( 16:18:44 )─< command 119 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # rev [1;2;3;4;5];;
- : int list = [5; 4; 3; 2; 1]
utop #
let rec flatten = function
  | []             -> []
  | (One a)  :: tl -> a :: flatten tl
  | (Many l) :: tl -> (flatten l) @ flatten tl;;
val flatten : 'a node list -> 'a list = <fun>
─( 16:27:02 )─< command 131 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # flatten [One 1; Many [One 2; One 3]; One 4];;
- : int list = [1; 2; 3; 4]
utop #
let rec contains l a =
  match l with
  | []       -> false
  | hd :: tl -> if (hd = a) then true else contains tl a;;
val contains : 'a list -> 'a -> bool = <fun>
─( 19:46:11 )─< command 135 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # contains [1;2;3;4] 5;;
- : bool = false
utop #
let compress l =
  let rec loop ll ac =
    match ll with
    |       [] -> ac
    | hd :: tl -> if (contains ac hd) then loop tl ac else loop tl (ac @ [hd]) in
  loop l [];;
val compress : 'a list -> 'a list = <fun>
─( 19:50:40 )─< command 141 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # compress [1;1;2;2;3;3;2;1;3;4;3];;
- : int list = [1; 2; 3; 4]
utop #
let pack l =
  let rec insert ll a =
    match ll with
    |       [] -> ll @ [[a]]
    | hd :: tl -> if (contains hd a) then (a :: hd) :: tl else hd :: (insert tl a) in
  let rec loop ll ac =
    match ll with
    |       [] -> ac
    | hd :: tl -> loop tl (insert ac hd) in
  loop l [];;
val pack : 'a list -> 'a list list = <fun>
─( 19:51:25 )─< command 143 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # pack [1;2;3;2;3;3;6;5;4;5;4;4];;
- : int list list = [[1]; [2; 2]; [3; 3; 3]; [6]; [5; 5]; [4; 4; 4]]
utop #
let encode l =
  let rec loop ll ac =
    match (ll,ac) with
    | (  [], _) -> ac
    | (h::t,[]) -> loop t [(1,h)]
    | (h::t, (n,l)::p) -> loop t (if (h = l) then ((n+1),l) :: p else (1,h) :: ac) in
  rev (loop l []);;
val encode : 'a list -> (int * 'a) list = <fun>
─( 20:39:18 )─< command 165 >──────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─
utop # encode ["a";"a";"b";"c";"c";"c";"a";"b";"b";"b"];;
- : (int * string) list = [(2, "a"); (1, "b"); (3, "c"); (1, "a"); (3, "b")]
